
target-drivers-SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000874  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a08  08000a08  00010a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a14  08000a14  00010a1c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a14  08000a14  00010a1c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a14  08000a1c  00010a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a14  08000a14  00010a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a18  08000a18  00010a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000a1c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000a1c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010a1c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000156d  00000000  00000000  00010a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000445  00000000  00000000  00011fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  00012400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000148  00000000  00000000  00012580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002274  00000000  00000000  000126c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000189e  00000000  00000000  0001493c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000091fb  00000000  00000000  000161da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001f3d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000580  00000000  00000000  0001f428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080009f0 	.word	0x080009f0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080009f0 	.word	0x080009f0

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <main>:

void SPI_GPIOInits(void);
void SPI2_Inits(void);


int main (void){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0

	char user_data[] = "Hello World";
 80001ea:	4a0e      	ldr	r2, [pc, #56]	; (8000224 <main+0x40>)
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80001f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	SPI_GPIOInits(); //Initialize GPIO pins to behave as SPI2 pins
 80001f4:	f000 f81a 	bl	800022c <SPI_GPIOInits>

	SPI2_Inits(); //Initialize the SPI2 peripheral parameters
 80001f8:	f000 f83a 	bl	8000270 <SPI2_Inits>

	//Error since SS isnt config
	SPI_SSIConfig(SPI2,ENABLE);
 80001fc:	2101      	movs	r1, #1
 80001fe:	480a      	ldr	r0, [pc, #40]	; (8000228 <main+0x44>)
 8000200:	f000 fba1 	bl	8000946 <SPI_SSIConfig>

	// Enable the SPI2 peripheral
	SPI_PeripheralControl(SPI2,ENABLE);
 8000204:	2101      	movs	r1, #1
 8000206:	4808      	ldr	r0, [pc, #32]	; (8000228 <main+0x44>)
 8000208:	f000 fb81 	bl	800090e <SPI_PeripheralControl>
	//SPI_PeripheralControl(SPI2,DISABLE);
	//while (1) {
		SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4618      	mov	r0, r3
 8000210:	f7ff ffe0 	bl	80001d4 <strlen>
 8000214:	4602      	mov	r2, r0
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4619      	mov	r1, r3
 800021a:	4803      	ldr	r0, [pc, #12]	; (8000228 <main+0x44>)
 800021c:	f000 fb40 	bl	80008a0 <SPI_SendData>
	//}

		//SPI_PeripheralControl(SPI2,DISABLE);

	while (1);
 8000220:	e7fe      	b.n	8000220 <main+0x3c>
 8000222:	bf00      	nop
 8000224:	08000a08 	.word	0x08000a08
 8000228:	40003800 	.word	0x40003800

0800022c <SPI_GPIOInits>:
}

void SPI_GPIOInits(void){
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000232:	4b0e      	ldr	r3, [pc, #56]	; (800026c <SPI_GPIOInits+0x40>)
 8000234:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000236:	2302      	movs	r3, #2
 8000238:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800023a:	2305      	movs	r3, #5
 800023c:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_PP;
 800023e:	2300      	movs	r3, #0
 8000240:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000242:	2300      	movs	r3, #0
 8000244:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000246:	2302      	movs	r3, #2
 8000248:	72bb      	strb	r3, [r7, #10]

	//PB13 --> SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800024a:	230d      	movs	r3, #13
 800024c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f8dd 	bl	8000410 <GPIO_Init>

	//PB15 --> MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000256:	230f      	movs	r3, #15
 8000258:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f8d7 	bl	8000410 <GPIO_Init>

	//PB12 --> NSS --> not used, can be commented
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	//GPIO_Init(&SPIPins);

}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40020400 	.word	0x40020400

08000270 <SPI2_Inits>:

void SPI2_Inits(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <SPI2_Inits+0x38>)
 8000278:	603b      	str	r3, [r7, #0]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800027a:	2301      	movs	r3, #1
 800027c:	717b      	strb	r3, [r7, #5]
	SPI2Handle.SPIConfig.SPI_DeviceMode = 1;
 800027e:	2301      	movs	r3, #1
 8000280:	713b      	strb	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2; // Generates SCLK 8MHz
 8000282:	2300      	movs	r3, #0
 8000284:	71bb      	strb	r3, [r7, #6]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000286:	2300      	movs	r3, #0
 8000288:	71fb      	strb	r3, [r7, #7]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_HIGH;
 800028a:	2301      	movs	r3, #1
 800028c:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_HIGH;
 800028e:	2301      	movs	r3, #1
 8000290:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_EN; // sw slave management en for NSS pin
 8000292:	2301      	movs	r3, #1
 8000294:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2Handle);
 8000296:	463b      	mov	r3, r7
 8000298:	4618      	mov	r0, r3
 800029a:	f000 faab 	bl	80007f4 <SPI_Init>
}
 800029e:	bf00      	nop
 80002a0:	3720      	adds	r7, #32
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40003800 	.word	0x40003800

080002ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b4:	480c      	ldr	r0, [pc, #48]	; (80002e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b6:	490d      	ldr	r1, [pc, #52]	; (80002ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <LoopForever+0xe>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002bc:	e002      	b.n	80002c4 <LoopCopyDataInit>

080002be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c2:	3304      	adds	r3, #4

080002c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c8:	d3f9      	bcc.n	80002be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <LoopForever+0x16>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d0:	e001      	b.n	80002d6 <LoopFillZerobss>

080002d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d4:	3204      	adds	r2, #4

080002d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d8:	d3fb      	bcc.n	80002d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002da:	f000 fb65 	bl	80009a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002de:	f7ff ff81 	bl	80001e4 <main>

080002e2 <LoopForever>:

LoopForever:
  b LoopForever
 80002e2:	e7fe      	b.n	80002e2 <LoopForever>
  ldr   r0, =_estack
 80002e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f0:	08000a1c 	.word	0x08000a1c
  ldr r2, =_sbss
 80002f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f8:	2000001c 	.word	0x2000001c

080002fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002fc:	e7fe      	b.n	80002fc <ADC_IRQHandler>
	...

08000300 <GPIO_PeriClkCtrl>:
 *
 *	@param	*pGPIOx -> pointer to GPIOx address (structure GPIO_RegDef_t type)
 *	@param	EnOrDi can be ENABLE or DISABLE
 *	@return void type
 */
void GPIO_PeriClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi){
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	460b      	mov	r3, r1
 800030a:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE){
 800030c:	78fb      	ldrb	r3, [r7, #3]
 800030e:	2b01      	cmp	r3, #1
 8000310:	d136      	bne.n	8000380 <GPIO_PeriClkCtrl+0x80>
		if(pGPIOx == GPIOA){
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a38      	ldr	r2, [pc, #224]	; (80003f8 <GPIO_PeriClkCtrl+0xf8>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_PeriClkCtrl+0x28>
			GPIOA_PCLK_EN();
 800031a:	4b38      	ldr	r3, [pc, #224]	; (80003fc <GPIO_PeriClkCtrl+0xfc>)
 800031c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031e:	4a37      	ldr	r2, [pc, #220]	; (80003fc <GPIO_PeriClkCtrl+0xfc>)
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOD_PCLK_DI();
		} else if (pGPIOx == GPIOE){
			GPIOE_PCLK_DI();
		}
	}
}
 8000326:	e061      	b.n	80003ec <GPIO_PeriClkCtrl+0xec>
		} else if (pGPIOx == GPIOB){
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a35      	ldr	r2, [pc, #212]	; (8000400 <GPIO_PeriClkCtrl+0x100>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d106      	bne.n	800033e <GPIO_PeriClkCtrl+0x3e>
			GPIOB_PCLK_EN();
 8000330:	4b32      	ldr	r3, [pc, #200]	; (80003fc <GPIO_PeriClkCtrl+0xfc>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4a31      	ldr	r2, [pc, #196]	; (80003fc <GPIO_PeriClkCtrl+0xfc>)
 8000336:	f043 0302 	orr.w	r3, r3, #2
 800033a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033c:	e056      	b.n	80003ec <GPIO_PeriClkCtrl+0xec>
		} else if (pGPIOx == GPIOC){
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a30      	ldr	r2, [pc, #192]	; (8000404 <GPIO_PeriClkCtrl+0x104>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PeriClkCtrl+0x54>
			GPIOC_PCLK_EN();
 8000346:	4b2d      	ldr	r3, [pc, #180]	; (80003fc <GPIO_PeriClkCtrl+0xfc>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	4a2c      	ldr	r2, [pc, #176]	; (80003fc <GPIO_PeriClkCtrl+0xfc>)
 800034c:	f043 0304 	orr.w	r3, r3, #4
 8000350:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000352:	e04b      	b.n	80003ec <GPIO_PeriClkCtrl+0xec>
		} else if (pGPIOx == GPIOD){
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a2c      	ldr	r2, [pc, #176]	; (8000408 <GPIO_PeriClkCtrl+0x108>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d106      	bne.n	800036a <GPIO_PeriClkCtrl+0x6a>
			GPIOD_PCLK_EN();
 800035c:	4b27      	ldr	r3, [pc, #156]	; (80003fc <GPIO_PeriClkCtrl+0xfc>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000360:	4a26      	ldr	r2, [pc, #152]	; (80003fc <GPIO_PeriClkCtrl+0xfc>)
 8000362:	f043 0308 	orr.w	r3, r3, #8
 8000366:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000368:	e040      	b.n	80003ec <GPIO_PeriClkCtrl+0xec>
		} else if (pGPIOx == GPIOE){
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a27      	ldr	r2, [pc, #156]	; (800040c <GPIO_PeriClkCtrl+0x10c>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d13c      	bne.n	80003ec <GPIO_PeriClkCtrl+0xec>
			GPIOE_PCLK_EN();
 8000372:	4b22      	ldr	r3, [pc, #136]	; (80003fc <GPIO_PeriClkCtrl+0xfc>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000376:	4a21      	ldr	r2, [pc, #132]	; (80003fc <GPIO_PeriClkCtrl+0xfc>)
 8000378:	f043 0310 	orr.w	r3, r3, #16
 800037c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037e:	e035      	b.n	80003ec <GPIO_PeriClkCtrl+0xec>
		if(pGPIOx == GPIOA){
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a1d      	ldr	r2, [pc, #116]	; (80003f8 <GPIO_PeriClkCtrl+0xf8>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d106      	bne.n	8000396 <GPIO_PeriClkCtrl+0x96>
			GPIOA_PCLK_DI();
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <GPIO_PeriClkCtrl+0xfc>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038c:	4a1b      	ldr	r2, [pc, #108]	; (80003fc <GPIO_PeriClkCtrl+0xfc>)
 800038e:	f023 0301 	bic.w	r3, r3, #1
 8000392:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000394:	e02a      	b.n	80003ec <GPIO_PeriClkCtrl+0xec>
		} else if (pGPIOx == GPIOB){
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a19      	ldr	r2, [pc, #100]	; (8000400 <GPIO_PeriClkCtrl+0x100>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d106      	bne.n	80003ac <GPIO_PeriClkCtrl+0xac>
			GPIOB_PCLK_DI();
 800039e:	4b17      	ldr	r3, [pc, #92]	; (80003fc <GPIO_PeriClkCtrl+0xfc>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a2:	4a16      	ldr	r2, [pc, #88]	; (80003fc <GPIO_PeriClkCtrl+0xfc>)
 80003a4:	f023 0302 	bic.w	r3, r3, #2
 80003a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003aa:	e01f      	b.n	80003ec <GPIO_PeriClkCtrl+0xec>
		} else if (pGPIOx == GPIOC){
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a15      	ldr	r2, [pc, #84]	; (8000404 <GPIO_PeriClkCtrl+0x104>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d106      	bne.n	80003c2 <GPIO_PeriClkCtrl+0xc2>
			GPIOC_PCLK_DI();
 80003b4:	4b11      	ldr	r3, [pc, #68]	; (80003fc <GPIO_PeriClkCtrl+0xfc>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b8:	4a10      	ldr	r2, [pc, #64]	; (80003fc <GPIO_PeriClkCtrl+0xfc>)
 80003ba:	f023 0304 	bic.w	r3, r3, #4
 80003be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c0:	e014      	b.n	80003ec <GPIO_PeriClkCtrl+0xec>
		} else if (pGPIOx == GPIOD){
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a10      	ldr	r2, [pc, #64]	; (8000408 <GPIO_PeriClkCtrl+0x108>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d106      	bne.n	80003d8 <GPIO_PeriClkCtrl+0xd8>
			GPIOD_PCLK_DI();
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <GPIO_PeriClkCtrl+0xfc>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ce:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <GPIO_PeriClkCtrl+0xfc>)
 80003d0:	f023 0308 	bic.w	r3, r3, #8
 80003d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d6:	e009      	b.n	80003ec <GPIO_PeriClkCtrl+0xec>
		} else if (pGPIOx == GPIOE){
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a0c      	ldr	r2, [pc, #48]	; (800040c <GPIO_PeriClkCtrl+0x10c>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d105      	bne.n	80003ec <GPIO_PeriClkCtrl+0xec>
			GPIOE_PCLK_DI();
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <GPIO_PeriClkCtrl+0xfc>)
 80003e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e4:	4a05      	ldr	r2, [pc, #20]	; (80003fc <GPIO_PeriClkCtrl+0xfc>)
 80003e6:	f023 0310 	bic.w	r3, r3, #16
 80003ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	40020000 	.word	0x40020000
 80003fc:	40023800 	.word	0x40023800
 8000400:	40020400 	.word	0x40020400
 8000404:	40020800 	.word	0x40020800
 8000408:	40020c00 	.word	0x40020c00
 800040c:	40021000 	.word	0x40021000

08000410 <GPIO_Init>:
 *	@brief	GPIO peripheral initialization
 *
 *	@param	*pGPIOHandle -> p -> pointer to GPIOHandle address (structure GPIO_Handle_t type)
 *	@return void type
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	uint32_t temp =0; // temp. register
 8000418:	2300      	movs	r3, #0
 800041a:	617b      	str	r3, [r7, #20]

	// automatically enables the peripheral clock
	GPIO_PeriClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2101      	movs	r1, #1
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff ff6c 	bl	8000300 <GPIO_PeriClkCtrl>

	// 1 Configure the mode of GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){ // <3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	795b      	ldrb	r3, [r3, #5]
 800042c:	2b03      	cmp	r3, #3
 800042e:	d81f      	bhi.n	8000470 <GPIO_Init+0x60>
		// value equal or less than 3 = non interrupt modes
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	795b      	ldrb	r3, [r3, #5]
 8000434:	461a      	mov	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	791b      	ldrb	r3, [r3, #4]
 800043a:	005b      	lsls	r3, r3, #1
 800043c:	fa02 f303 	lsl.w	r3, r2, r3
 8000440:	617b      	str	r3, [r7, #20]
		// 2* pois são 2 bits o MODER
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clear bit fields bf setting new value
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	791b      	ldrb	r3, [r3, #4]
 800044c:	4619      	mov	r1, r3
 800044e:	2303      	movs	r3, #3
 8000450:	408b      	lsls	r3, r1
 8000452:	43db      	mvns	r3, r3
 8000454:	4619      	mov	r1, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	400a      	ands	r2, r1
 800045c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	6819      	ldr	r1, [r3, #0]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	697a      	ldr	r2, [r7, #20]
 800046a:	430a      	orrs	r2, r1
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	e0a1      	b.n	80005b4 <GPIO_Init+0x1a4>
	}else{ // >= 4 INTERRUPT MODES

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	795b      	ldrb	r3, [r3, #5]
 8000474:	2b04      	cmp	r3, #4
 8000476:	d117      	bne.n	80004a8 <GPIO_Init+0x98>
			//1. configure the FTSR Falling Trigger Selecting Register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000478:	4b9d      	ldr	r3, [pc, #628]	; (80006f0 <GPIO_Init+0x2e0>)
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	7912      	ldrb	r2, [r2, #4]
 8000480:	4611      	mov	r1, r2
 8000482:	2201      	movs	r2, #1
 8000484:	408a      	lsls	r2, r1
 8000486:	4611      	mov	r1, r2
 8000488:	4a99      	ldr	r2, [pc, #612]	; (80006f0 <GPIO_Init+0x2e0>)
 800048a:	430b      	orrs	r3, r1
 800048c:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800048e:	4b98      	ldr	r3, [pc, #608]	; (80006f0 <GPIO_Init+0x2e0>)
 8000490:	689b      	ldr	r3, [r3, #8]
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	7912      	ldrb	r2, [r2, #4]
 8000496:	4611      	mov	r1, r2
 8000498:	2201      	movs	r2, #1
 800049a:	408a      	lsls	r2, r1
 800049c:	43d2      	mvns	r2, r2
 800049e:	4611      	mov	r1, r2
 80004a0:	4a93      	ldr	r2, [pc, #588]	; (80006f0 <GPIO_Init+0x2e0>)
 80004a2:	400b      	ands	r3, r1
 80004a4:	6093      	str	r3, [r2, #8]
 80004a6:	e035      	b.n	8000514 <GPIO_Init+0x104>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	795b      	ldrb	r3, [r3, #5]
 80004ac:	2b05      	cmp	r3, #5
 80004ae:	d117      	bne.n	80004e0 <GPIO_Init+0xd0>
			//1. configure the RTSR Rising Trigger
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b0:	4b8f      	ldr	r3, [pc, #572]	; (80006f0 <GPIO_Init+0x2e0>)
 80004b2:	689b      	ldr	r3, [r3, #8]
 80004b4:	687a      	ldr	r2, [r7, #4]
 80004b6:	7912      	ldrb	r2, [r2, #4]
 80004b8:	4611      	mov	r1, r2
 80004ba:	2201      	movs	r2, #1
 80004bc:	408a      	lsls	r2, r1
 80004be:	4611      	mov	r1, r2
 80004c0:	4a8b      	ldr	r2, [pc, #556]	; (80006f0 <GPIO_Init+0x2e0>)
 80004c2:	430b      	orrs	r3, r1
 80004c4:	6093      	str	r3, [r2, #8]
			// Clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c6:	4b8a      	ldr	r3, [pc, #552]	; (80006f0 <GPIO_Init+0x2e0>)
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	7912      	ldrb	r2, [r2, #4]
 80004ce:	4611      	mov	r1, r2
 80004d0:	2201      	movs	r2, #1
 80004d2:	408a      	lsls	r2, r1
 80004d4:	43d2      	mvns	r2, r2
 80004d6:	4611      	mov	r1, r2
 80004d8:	4a85      	ldr	r2, [pc, #532]	; (80006f0 <GPIO_Init+0x2e0>)
 80004da:	400b      	ands	r3, r1
 80004dc:	60d3      	str	r3, [r2, #12]
 80004de:	e019      	b.n	8000514 <GPIO_Init+0x104>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	795b      	ldrb	r3, [r3, #5]
 80004e4:	2b06      	cmp	r3, #6
 80004e6:	d115      	bne.n	8000514 <GPIO_Init+0x104>
			//1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e8:	4b81      	ldr	r3, [pc, #516]	; (80006f0 <GPIO_Init+0x2e0>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	7912      	ldrb	r2, [r2, #4]
 80004f0:	4611      	mov	r1, r2
 80004f2:	2201      	movs	r2, #1
 80004f4:	408a      	lsls	r2, r1
 80004f6:	4611      	mov	r1, r2
 80004f8:	4a7d      	ldr	r2, [pc, #500]	; (80006f0 <GPIO_Init+0x2e0>)
 80004fa:	430b      	orrs	r3, r1
 80004fc:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004fe:	4b7c      	ldr	r3, [pc, #496]	; (80006f0 <GPIO_Init+0x2e0>)
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	7912      	ldrb	r2, [r2, #4]
 8000506:	4611      	mov	r1, r2
 8000508:	2201      	movs	r2, #1
 800050a:	408a      	lsls	r2, r1
 800050c:	4611      	mov	r1, r2
 800050e:	4a78      	ldr	r2, [pc, #480]	; (80006f0 <GPIO_Init+0x2e0>)
 8000510:	430b      	orrs	r3, r1
 8000512:	6093      	str	r3, [r2, #8]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /4;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	089b      	lsrs	r3, r3, #2
 800051a:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %4;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	791b      	ldrb	r3, [r3, #4]
 8000520:	f003 0303 	and.w	r3, r3, #3
 8000524:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a72      	ldr	r2, [pc, #456]	; (80006f4 <GPIO_Init+0x2e4>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d024      	beq.n	800057a <GPIO_Init+0x16a>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a70      	ldr	r2, [pc, #448]	; (80006f8 <GPIO_Init+0x2e8>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d01d      	beq.n	8000576 <GPIO_Init+0x166>
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a6f      	ldr	r2, [pc, #444]	; (80006fc <GPIO_Init+0x2ec>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d016      	beq.n	8000572 <GPIO_Init+0x162>
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a6d      	ldr	r2, [pc, #436]	; (8000700 <GPIO_Init+0x2f0>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d00f      	beq.n	800056e <GPIO_Init+0x15e>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a6c      	ldr	r2, [pc, #432]	; (8000704 <GPIO_Init+0x2f4>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d008      	beq.n	800056a <GPIO_Init+0x15a>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a6a      	ldr	r2, [pc, #424]	; (8000708 <GPIO_Init+0x2f8>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d101      	bne.n	8000566 <GPIO_Init+0x156>
 8000562:	2305      	movs	r3, #5
 8000564:	e00a      	b.n	800057c <GPIO_Init+0x16c>
 8000566:	2300      	movs	r3, #0
 8000568:	e008      	b.n	800057c <GPIO_Init+0x16c>
 800056a:	2304      	movs	r3, #4
 800056c:	e006      	b.n	800057c <GPIO_Init+0x16c>
 800056e:	2303      	movs	r3, #3
 8000570:	e004      	b.n	800057c <GPIO_Init+0x16c>
 8000572:	2302      	movs	r3, #2
 8000574:	e002      	b.n	800057c <GPIO_Init+0x16c>
 8000576:	2301      	movs	r3, #1
 8000578:	e000      	b.n	800057c <GPIO_Init+0x16c>
 800057a:	2300      	movs	r3, #0
 800057c:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800057e:	4b63      	ldr	r3, [pc, #396]	; (800070c <GPIO_Init+0x2fc>)
 8000580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000582:	4a62      	ldr	r2, [pc, #392]	; (800070c <GPIO_Init+0x2fc>)
 8000584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000588:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 *4);
 800058a:	7c7a      	ldrb	r2, [r7, #17]
 800058c:	7cbb      	ldrb	r3, [r7, #18]
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	fa02 f103 	lsl.w	r1, r2, r3
 8000594:	4a5e      	ldr	r2, [pc, #376]	; (8000710 <GPIO_Init+0x300>)
 8000596:	7cfb      	ldrb	r3, [r7, #19]
 8000598:	3302      	adds	r3, #2
 800059a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the EXTI interrupt delivery using IMR (interrupt mask register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800059e:	4b54      	ldr	r3, [pc, #336]	; (80006f0 <GPIO_Init+0x2e0>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	7912      	ldrb	r2, [r2, #4]
 80005a6:	4611      	mov	r1, r2
 80005a8:	2201      	movs	r2, #1
 80005aa:	408a      	lsls	r2, r1
 80005ac:	4611      	mov	r1, r2
 80005ae:	4a50      	ldr	r2, [pc, #320]	; (80006f0 <GPIO_Init+0x2e0>)
 80005b0:	430b      	orrs	r3, r1
 80005b2:	6013      	str	r3, [r2, #0]
	}

	temp=0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]

	// 2 Configure Speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	799b      	ldrb	r3, [r3, #6]
 80005bc:	461a      	mov	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	791b      	ldrb	r3, [r3, #4]
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	fa02 f303 	lsl.w	r3, r2, r3
 80005c8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clear bit fields bf setting new value
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	689a      	ldr	r2, [r3, #8]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	4619      	mov	r1, r3
 80005d6:	2303      	movs	r3, #3
 80005d8:	408b      	lsls	r3, r1
 80005da:	43db      	mvns	r3, r3
 80005dc:	4619      	mov	r1, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	400a      	ands	r2, r1
 80005e4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	6899      	ldr	r1, [r3, #8]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	430a      	orrs	r2, r1
 80005f4:	609a      	str	r2, [r3, #8]

	temp=0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]

	// 3 Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	79db      	ldrb	r3, [r3, #7]
 80005fe:	461a      	mov	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	791b      	ldrb	r3, [r3, #4]
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	fa02 f303 	lsl.w	r3, r2, r3
 800060a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clear bit fields bf setting new value
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	68da      	ldr	r2, [r3, #12]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	4619      	mov	r1, r3
 8000618:	2303      	movs	r3, #3
 800061a:	408b      	lsls	r3, r1
 800061c:	43db      	mvns	r3, r3
 800061e:	4619      	mov	r1, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	400a      	ands	r2, r1
 8000626:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	68d9      	ldr	r1, [r3, #12]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	697a      	ldr	r2, [r7, #20]
 8000634:	430a      	orrs	r2, r1
 8000636:	60da      	str	r2, [r3, #12]

	temp=0;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]

	// 4 Configure the OPTYPE
	// This should be set only for output mode OR the structure GPIO_Handle_t must
	// be cleared when initialized
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	7a1b      	ldrb	r3, [r3, #8]
 8000640:	461a      	mov	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	fa02 f303 	lsl.w	r3, r2, r3
 800064a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clear bit fields bf setting new value
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	685a      	ldr	r2, [r3, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	791b      	ldrb	r3, [r3, #4]
 8000656:	4619      	mov	r1, r3
 8000658:	2301      	movs	r3, #1
 800065a:	408b      	lsls	r3, r1
 800065c:	43db      	mvns	r3, r3
 800065e:	4619      	mov	r1, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	400a      	ands	r2, r1
 8000666:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	6859      	ldr	r1, [r3, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	697a      	ldr	r2, [r7, #20]
 8000674:	430a      	orrs	r2, r1
 8000676:	605a      	str	r2, [r3, #4]

	temp=0;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]

	// 5 Configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	795b      	ldrb	r3, [r3, #5]
 8000680:	2b02      	cmp	r3, #2
 8000682:	d131      	bne.n	80006e8 <GPIO_Init+0x2d8>
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	791b      	ldrb	r3, [r3, #4]
 8000688:	08db      	lsrs	r3, r3, #3
 800068a:	743b      	strb	r3, [r7, #16]
		//temp1 will find the which AFR to use ([0] or [1]) by:
		//number less than 0 = [0] .. pin 0 to 7 /8 is equal to 0.?
		//number bigger than 1 = [1] .. pin 8 to 16 /8 is equal to 1.? or 2
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	791b      	ldrb	r3, [r3, #4]
 8000690:	f003 0307 	and.w	r3, r3, #7
 8000694:	73fb      	strb	r3, [r7, #15]
		//temp2 will find out the number of the field position (pin) by taking the mod by 8
		// 0 mod 8 = 0, 1 mod 8 = 1, 2 mod 8 = 2, 3 mod 8 = 3 ... 7 mod 8 = 7
		// 8 mod 8 = 0, 9 mod 8 = 1, 10 mod 8 = 2, 11 mod 8 = 3 ... 15 mod 8 = 7
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //Clear bit
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	7c3a      	ldrb	r2, [r7, #16]
 800069c:	3208      	adds	r2, #8
 800069e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	220f      	movs	r2, #15
 80006a8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ac:	43db      	mvns	r3, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	7c3a      	ldrb	r2, [r7, #16]
 80006b6:	4001      	ands	r1, r0
 80006b8:	3208      	adds	r2, #8
 80006ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	7c3a      	ldrb	r2, [r7, #16]
 80006c4:	3208      	adds	r2, #8
 80006c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	7a5b      	ldrb	r3, [r3, #9]
 80006ce:	461a      	mov	r2, r3
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	fa02 f303 	lsl.w	r3, r2, r3
 80006d8:	4618      	mov	r0, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	7c3a      	ldrb	r2, [r7, #16]
 80006e0:	4301      	orrs	r1, r0
 80006e2:	3208      	adds	r2, #8
 80006e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		//AFRL/AFRH uses 4 bit position to configure each pin, so 4 bits must be set (4*)
	}
}
 80006e8:	bf00      	nop
 80006ea:	3718      	adds	r7, #24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40013c00 	.word	0x40013c00
 80006f4:	40020000 	.word	0x40020000
 80006f8:	40020400 	.word	0x40020400
 80006fc:	40020800 	.word	0x40020800
 8000700:	40020c00 	.word	0x40020c00
 8000704:	40021000 	.word	0x40021000
 8000708:	40021c00 	.word	0x40021c00
 800070c:	40023800 	.word	0x40023800
 8000710:	40013800 	.word	0x40013800

08000714 <SPI_PeriClkCtrl>:
 *
 *	@param	*pSPIx -> pointer to SPIx address (structure SPI_RegDef_t type)
 *	@param	EnOrDi can be ENABLE or DISABLE
 *	@return void type
 */
void SPI_PeriClkCtrl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE){
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d12b      	bne.n	800077e <SPI_PeriClkCtrl+0x6a>
		if(pSPIx == SPI1){
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a2d      	ldr	r2, [pc, #180]	; (80007e0 <SPI_PeriClkCtrl+0xcc>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d106      	bne.n	800073c <SPI_PeriClkCtrl+0x28>
			SPI1_PCLK_EN();
 800072e:	4b2d      	ldr	r3, [pc, #180]	; (80007e4 <SPI_PeriClkCtrl+0xd0>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000732:	4a2c      	ldr	r2, [pc, #176]	; (80007e4 <SPI_PeriClkCtrl+0xd0>)
 8000734:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000738:	6453      	str	r3, [r2, #68]	; 0x44
			SPI3_PCLK_DI();
		} else if (pSPIx == SPI4){
			SPI4_PCLK_DI();
		}
	}
}
 800073a:	e04b      	b.n	80007d4 <SPI_PeriClkCtrl+0xc0>
		} else if (pSPIx == SPI2){
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a2a      	ldr	r2, [pc, #168]	; (80007e8 <SPI_PeriClkCtrl+0xd4>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d106      	bne.n	8000752 <SPI_PeriClkCtrl+0x3e>
			SPI2_PCLK_EN();
 8000744:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <SPI_PeriClkCtrl+0xd0>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	4a26      	ldr	r2, [pc, #152]	; (80007e4 <SPI_PeriClkCtrl+0xd0>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000750:	e040      	b.n	80007d4 <SPI_PeriClkCtrl+0xc0>
		} else if (pSPIx == SPI3){
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a25      	ldr	r2, [pc, #148]	; (80007ec <SPI_PeriClkCtrl+0xd8>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d106      	bne.n	8000768 <SPI_PeriClkCtrl+0x54>
			SPI3_PCLK_EN();
 800075a:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <SPI_PeriClkCtrl+0xd0>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	4a21      	ldr	r2, [pc, #132]	; (80007e4 <SPI_PeriClkCtrl+0xd0>)
 8000760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000764:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000766:	e035      	b.n	80007d4 <SPI_PeriClkCtrl+0xc0>
		} else if (pSPIx == SPI4){
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <SPI_PeriClkCtrl+0xdc>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d131      	bne.n	80007d4 <SPI_PeriClkCtrl+0xc0>
			SPI4_PCLK_EN();
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <SPI_PeriClkCtrl+0xd0>)
 8000772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000774:	4a1b      	ldr	r2, [pc, #108]	; (80007e4 <SPI_PeriClkCtrl+0xd0>)
 8000776:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800077a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800077c:	e02a      	b.n	80007d4 <SPI_PeriClkCtrl+0xc0>
		if(pSPIx == SPI1){
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a17      	ldr	r2, [pc, #92]	; (80007e0 <SPI_PeriClkCtrl+0xcc>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d106      	bne.n	8000794 <SPI_PeriClkCtrl+0x80>
			SPI1_PCLK_DI();
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <SPI_PeriClkCtrl+0xd0>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a16      	ldr	r2, [pc, #88]	; (80007e4 <SPI_PeriClkCtrl+0xd0>)
 800078c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000792:	e01f      	b.n	80007d4 <SPI_PeriClkCtrl+0xc0>
		} else if (pSPIx == SPI2){
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <SPI_PeriClkCtrl+0xd4>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d106      	bne.n	80007aa <SPI_PeriClkCtrl+0x96>
			SPI2_PCLK_DI();
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <SPI_PeriClkCtrl+0xd0>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	4a10      	ldr	r2, [pc, #64]	; (80007e4 <SPI_PeriClkCtrl+0xd0>)
 80007a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80007a6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007a8:	e014      	b.n	80007d4 <SPI_PeriClkCtrl+0xc0>
		} else if (pSPIx == SPI3){
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <SPI_PeriClkCtrl+0xd8>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d106      	bne.n	80007c0 <SPI_PeriClkCtrl+0xac>
			SPI3_PCLK_DI();
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <SPI_PeriClkCtrl+0xd0>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <SPI_PeriClkCtrl+0xd0>)
 80007b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007bc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007be:	e009      	b.n	80007d4 <SPI_PeriClkCtrl+0xc0>
		} else if (pSPIx == SPI4){
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <SPI_PeriClkCtrl+0xdc>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d105      	bne.n	80007d4 <SPI_PeriClkCtrl+0xc0>
			SPI4_PCLK_DI();
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <SPI_PeriClkCtrl+0xd0>)
 80007ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007cc:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <SPI_PeriClkCtrl+0xd0>)
 80007ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007d2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	40013000 	.word	0x40013000
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40003800 	.word	0x40003800
 80007ec:	40003c00 	.word	0x40003c00
 80007f0:	40013400 	.word	0x40013400

080007f4 <SPI_Init>:
 *	@brief
 *
 *	@param
 *	@return void type
 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]

	// automatically enables the peripheral clock
	SPI_PeriClkCtrl(pSPIHandle->pSPIx, ENABLE);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2101      	movs	r1, #1
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff86 	bl	8000714 <SPI_PeriClkCtrl>

	// 1. Lets configure the SPI_CR1 register
	uint32_t tempreg = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]

	// 1.a. Configure the device mode
	// NO MACROS: tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	791b      	ldrb	r3, [r3, #4]
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	461a      	mov	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	4313      	orrs	r3, r2
 8000818:	60fb      	str	r3, [r7, #12]

	// 1.b. Configure the bus configuration
	if(pSPIHandle->SPIConfig.SPI_DeviceMode == SPI_BUS_CONFIG_FD){
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	791b      	ldrb	r3, [r3, #4]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d014      	beq.n	800084c <SPI_Init+0x58>
		//Bi-direcional mode should be cleared
		//tempreg &= ~(SPI_CR1_BIDIMODE);
	}else if (pSPIHandle->SPIConfig.SPI_DeviceMode == SPI_BUS_CONFIG_HD){
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	791b      	ldrb	r3, [r3, #4]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d104      	bne.n	8000834 <SPI_Init+0x40>
		//Bi-direcional mode should be set
		tempreg |= (SPI_CR1_BIDIMODE);
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f043 030f 	orr.w	r3, r3, #15
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	e00b      	b.n	800084c <SPI_Init+0x58>
	}else if (pSPIHandle->SPIConfig.SPI_DeviceMode == SPI_BUS_CONFIG_S_RXONLY){
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	791b      	ldrb	r3, [r3, #4]
 8000838:	2b04      	cmp	r3, #4
 800083a:	d107      	bne.n	800084c <SPI_Init+0x58>
		//Bi-direcional mode should be cleared
		tempreg &= ~(SPI_CR1_BIDIMODE);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f023 030f 	bic.w	r3, r3, #15
 8000842:	60fb      	str	r3, [r7, #12]
		//RX Only bit must be set
		tempreg |= (SPI_CR1_RXONLY);
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f043 030a 	orr.w	r3, r3, #10
 800084a:	60fb      	str	r3, [r7, #12]
	}else if (pSPIHandle->SPIConfig.SPI_DeviceMode == SPI_BUS_CONFIG_S_TXONLY){

	}
	// 1.c. Configure the SPI serial clock speed (baud rate)
	// NO MACROS: tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << 3;
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	799b      	ldrb	r3, [r3, #6]
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	461a      	mov	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4313      	orrs	r3, r2
 8000858:	60fb      	str	r3, [r7, #12]

	// 1.d. Configure the DFF
	// NO MACROS: tempreg |= pSPIHandle->SPIConfig.SPI_DFF << 11;
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	79db      	ldrb	r3, [r3, #7]
 800085e:	02db      	lsls	r3, r3, #11
 8000860:	461a      	mov	r2, r3
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	4313      	orrs	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]

	// 1.e. Configure the CPOL
	// NO MACROS: tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << 1;
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	7a1b      	ldrb	r3, [r3, #8]
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	461a      	mov	r2, r3
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	4313      	orrs	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]

	// 1.f. Configure the CPHA
	// NO MACROS: tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << 0;
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7a5b      	ldrb	r3, [r3, #9]
 800087a:	461a      	mov	r2, r3
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	4313      	orrs	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]

	// 1.g. Configure the SSM
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	7a9b      	ldrb	r3, [r3, #10]
 8000886:	025b      	lsls	r3, r3, #9
 8000888:	461a      	mov	r2, r3
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	4313      	orrs	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]

	// Send values do SPI_CR1
	pSPIHandle->pSPIx->CR1 = tempreg;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	68fa      	ldr	r2, [r7, #12]
 8000896:	601a      	str	r2, [r3, #0]

	// 2. Lets configure the SPI_CR2 register
}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <SPI_SendData>:
 *	@param	*pSPIx -> pointer to SPIx address (structure SPI_RegDef_t type)
 *	@param	*pTxBuffer
 *	@param  Len
 *	@return void type
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
	//SPI_SR_TXE says if the Transmit buffer empty (1 = empty)
	//RXNE flag set when RX buffer is not empty
	while (Len>0){
 80008ac:	e027      	b.n	80008fe <SPI_SendData+0x5e>
		//1. Wait until TXE is set
		//ONE WAY: while(!(pSPIx->SR & (1<<1)));
		while (SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG) == FLAG_RESET); //OR ANOTHER
 80008ae:	bf00      	nop
 80008b0:	2102      	movs	r1, #2
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f000 f863 	bl	800097e <SPI_GetFlagStatus>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d0f8      	beq.n	80008b0 <SPI_SendData+0x10>
		// Here we are polling for the TXE flag to SET [NOT GOOD]
		// Later we will implement an interrupt so code won't get stuck in here

		//2. Check the DFF  bit in CR1
		if((pSPIx->CR1 & (1 << SPI_CR1_DFF))){
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d00e      	beq.n	80008e8 <SPI_SendData+0x48>
			// 16-bit DFF
			//2.a. Load the data in to the DR
			pSPIx-> DR = *((uint16_t*)pTxBuffer); //de-referenced value typecasted to 16 bit lenght
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	60da      	str	r2, [r3, #12]
			Len--;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	607b      	str	r3, [r7, #4]
			Len--; // 2 bytes sent at time
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3b01      	subs	r3, #1
 80008de:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++; // Increment the buffer
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	3301      	adds	r3, #1
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	e00a      	b.n	80008fe <SPI_SendData+0x5e>
		}else{
			// 8-bit DFF
			pSPIx-> DR = *pTxBuffer;
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	60da      	str	r2, [r3, #12]
			Len--;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3b01      	subs	r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
			pTxBuffer++; // Increment the buffer
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	3301      	adds	r3, #1
 80008fc:	60bb      	str	r3, [r7, #8]
	while (Len>0){
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d1d4      	bne.n	80008ae <SPI_SendData+0xe>
		}
	}
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <SPI_PeripheralControl>:
 *
 *	@param	*pSPIx -> pointer to SPIx address (structure SPI_RegDef_t type)
 *	@param	EnOrDi can be ENABLE or DISABLE
 *	@return void type
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	460b      	mov	r3, r1
 8000918:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 800091a:	78fb      	ldrb	r3, [r7, #3]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d106      	bne.n	800092e <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 800092c:	e005      	b.n	800093a <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	601a      	str	r2, [r3, #0]
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <SPI_SSIConfig>:
 *
 *	@param	*pSPIx -> pointer to SPIx address (structure SPI_RegDef_t type)
 *	@param	EnOrDi can be ENABLE or DISABLE
 *	@return void type
 */
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	460b      	mov	r3, r1
 8000950:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000952:	78fb      	ldrb	r3, [r7, #3]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d106      	bne.n	8000966 <SPI_SSIConfig+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}
 8000964:	e005      	b.n	8000972 <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	601a      	str	r2, [r3, #0]
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <SPI_GetFlagStatus>:


// Wait until flag is cleared using pooling method
// pooling is not ideal since the CPU stops inside this funcion
// the ideal method is by using interruption (later on this course I guess)
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
 8000986:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName){
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689a      	ldr	r2, [r3, #8]
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	4013      	ands	r3, r2
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000994:	2301      	movs	r3, #1
 8000996:	e000      	b.n	800099a <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
	...

080009a8 <__libc_init_array>:
 80009a8:	b570      	push	{r4, r5, r6, lr}
 80009aa:	4d0d      	ldr	r5, [pc, #52]	; (80009e0 <__libc_init_array+0x38>)
 80009ac:	4c0d      	ldr	r4, [pc, #52]	; (80009e4 <__libc_init_array+0x3c>)
 80009ae:	1b64      	subs	r4, r4, r5
 80009b0:	10a4      	asrs	r4, r4, #2
 80009b2:	2600      	movs	r6, #0
 80009b4:	42a6      	cmp	r6, r4
 80009b6:	d109      	bne.n	80009cc <__libc_init_array+0x24>
 80009b8:	4d0b      	ldr	r5, [pc, #44]	; (80009e8 <__libc_init_array+0x40>)
 80009ba:	4c0c      	ldr	r4, [pc, #48]	; (80009ec <__libc_init_array+0x44>)
 80009bc:	f000 f818 	bl	80009f0 <_init>
 80009c0:	1b64      	subs	r4, r4, r5
 80009c2:	10a4      	asrs	r4, r4, #2
 80009c4:	2600      	movs	r6, #0
 80009c6:	42a6      	cmp	r6, r4
 80009c8:	d105      	bne.n	80009d6 <__libc_init_array+0x2e>
 80009ca:	bd70      	pop	{r4, r5, r6, pc}
 80009cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80009d0:	4798      	blx	r3
 80009d2:	3601      	adds	r6, #1
 80009d4:	e7ee      	b.n	80009b4 <__libc_init_array+0xc>
 80009d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009da:	4798      	blx	r3
 80009dc:	3601      	adds	r6, #1
 80009de:	e7f2      	b.n	80009c6 <__libc_init_array+0x1e>
 80009e0:	08000a14 	.word	0x08000a14
 80009e4:	08000a14 	.word	0x08000a14
 80009e8:	08000a14 	.word	0x08000a14
 80009ec:	08000a18 	.word	0x08000a18

080009f0 <_init>:
 80009f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009f2:	bf00      	nop
 80009f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009f6:	bc08      	pop	{r3}
 80009f8:	469e      	mov	lr, r3
 80009fa:	4770      	bx	lr

080009fc <_fini>:
 80009fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009fe:	bf00      	nop
 8000a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a02:	bc08      	pop	{r3}
 8000a04:	469e      	mov	lr, r3
 8000a06:	4770      	bx	lr
